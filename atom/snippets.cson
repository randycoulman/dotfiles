# Your snippets
#
# Atom snippets allow you to enter a simple prefix in the editor and hit tab to
# expand the prefix into a larger code block with templated values.
#
# You can create a new snippet in this file by typing "snip" and then hitting
# tab.
#
# An example CoffeeScript snippet to expand log to console.log:
#
# '.source.coffee':
#   'Console log':
#     'prefix': 'log'
#     'body': 'console.log $1'
#
# Each scope (e.g. '.source.coffee' above) can only be declared once.
#
# This file uses CoffeeScript Object Notation (CSON).
# If you are unfamiliar with CSON, you can read more about it in the
# Atom Flight Manual:
# https://atom.io/docs/latest/using-atom-basic-customization#cson

'.source.js':
  'Redux ActionType':
    'prefix': 'ract'
    'body': """
            import { createActionTypes } from 'utils'

            export default createActionTypes('$1', [
              '$2'
            ])

            """
  'Redux container':
    'prefix': 'rcont'
    'body': """
            import { connect } from 'react-redux'

            import $1 from '../components/$1'

            export default connect()($1)

            """
  'Redux reducer':
    'prefix': 'rred'
    'body': """
            // import ActionType from './constants/ActionType'
            import { createReducer } from 'utils'

            const initialState = {
            }

            export default createReducer(initialState, {
            })

            """
  'Redux reducer spec':
    'prefix': 'rrspec'
    'body': """
            import reducer from '../reducer'
            import { nullAction } from 'testutils'

            describe('$1 reducer', () => {
              const initialState = reducer(undefined, nullAction)

              describe('$2', () => {
                $3
              })
            })

            """
  'Redux reducer action spec':
    'prefix': 'rrit'
    'body': """
            describe('$1', () => {
              const state = initialState
              const action = $2
              const newState = reducer(state, action)

              it('$3', () => {
                expect($4).$5
              })
            })

            """
  'Redux selectors':
    'prefix': 'rsel'
    'body': """
            import { prop } from 'ramda'

            import { globalizeSelectors } from 'utils'

            const localState = prop('$1')

            export default globalizeSelectors(localState, {
            })

            """
  'Component (React Native)':
    'prefix': 'rncomp'
    'body': """
            import React from 'react'
            import { View } from 'react-native'

            import styles from './styles'

            const $1 = () => (
              <View style={styles.container} />
            )

            export default $1

            """
  'Stylesheet (React Native)':
    'prefix': 'rnss'
    'body': """
            import { StyleSheet } from 'react-native'

            export default StyleSheet.create({
              $1
            })

            """
'.source.gfm':
  'Octopress Codeblock':
    'prefix': 'cb'
    'body': """
            {% codeblock $1 lang:$2 %}
            $3
            {% endcodeblock %}

            """
